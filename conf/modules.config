/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    // Publish directory names
    cluster_directory_name = "clusters"
    profile_dists_directory_name = "distances"
    arbor_view_directory_name = "ArborView"
    cluster_prefix = 'gas.mcluster.'
    profile_dists_prefix = 'profile_dists.'
    arbor_view_prefix = 'arborview.'

    locidex_merge_directory_name = [params.outdir , "locidex"].join(File.separator)

    locidex_concat_directory_name = [params.outdir , "locidex", "concat"].join(File.separator)

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: LOCIDEX_MERGE {
        publishDir = [
            path: locidex_merge_directory_name,
            mode: params.publish_dir_mode,
            pattern:  "merged/{MLST_error_report,profile}*.{csv,tsv}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: LOCIDEX_CONCAT {
        publishDir = [
            path: locidex_concat_directory_name,
            mode: params.publish_dir_mode,
            pattern:  "{MLST_error_report_,profile_}concat.{csv,tsv}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GAS_MCLUSTER {
        publishDir = [
            path: { ["${params.outdir}", "${task.cluster_directory_name}"].join(File.separator) },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null :
                filename.contains(File.separator) ? task.cluster_prefix + filename.split(File.separator)[-1] : task.cluster_prefix + filename }
        ]
    }

    withName: PROFILE_DISTS {
        publishDir = [
            path: { ["${params.outdir}", "${task.profile_dists_directory_name}"].join(File.separator) },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null :
                filename.contains(File.separator) ? task.profile_dists_prefix + filename.split(File.separator)[-1] : task.profile_dists_prefix + filename }
        ]
    }

    withName: ARBOR_VIEW{
        publishDir = [
            path: { ["${params.outdir}", "${task.arbor_view_directory_name}"].join(File.separator) },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null :
                filename.contains(File.separator) ? task.arbor_view_prefix + filename.split(File.separator)[-1] : task.arbor_view_prefix + filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
