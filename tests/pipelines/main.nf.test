nextflow_pipeline {

    name "Integration Tests of Allele Clustering"
    script "main.nf"

    test("Small-scale test of full pipeline") {
        tag "pipeline_simple"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"

                metadata_1_header = "myheader_1"
                metadata_2_header = "myheader_2"
                metadata_3_header = "myheader_3"
                metadata_4_header = "myheader_4"
                metadata_5_header = "myheader_5"
                metadata_6_header = "myheader_6"
                metadata_7_header = "myheader_7"
                metadata_8_header = "myheader_8"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check ID correction:
            def sample_report = path("$launchDir/results/locidex/concat/MLST_error_report_concat.csv").text
            assert !sample_report.contains("sample1")
            assert !sample_report.contains("sample2")
            assert !sample_report.contains("sample3")

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile1.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            assert actual_tree.exists()
            assert actual_clusters.exists()
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            assert actual_metadata.exists()
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/arborview.clustered_data_arborview.html")
            assert actual_arborview.exists()
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tsample\\tmyheader_1\\tmyheader_2\\tmyheader_3\\tmyheader_4\\tmyheader_5\\tmyheader_6\\tmyheader_7\\tmyheader_8\\nsample1\\t1.1.1\\t1\\t1\\t1\\tsample1\\t1.1\\t1.2\\t1.3\\t1.4\\t1.5\\t1.6\\t1.7\\t1.8\\nsample2\\t1.1.1\\t1\\t1\\t1\\tsample2\\t2.1\\t2.2\\t2.3\\t2.4\\t2.5\\t2.6\\t2.7\\t2.8\\nsample3\\t1.2.2\\t1\\t2\\t2\\tsample3\\t3.1\\t3.2\\t3.3\\t3.4\\t3.5\\t3.6\\t3.7\\t3.8\\n")
            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "ArborView/arborview.clustered_data_arborview.html" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.tree.nwk" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.clusters.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.thresholds.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "locidex/merged/profile_1.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Small-scale test of full pipeline hamming distances") {
        tag "pipeline_hamming"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "2,1,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree_hamming.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Make sure average-linkage (default) parameter was used
            assert "average" == path("$launchDir/results/clusters/gas.mcluster.run.json").json.parameters.method

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata_hamming.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/arborview.clustered_data_arborview.html")
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tsample\\tmetadata_1\\tmetadata_2\\tmetadata_3\\tmetadata_4\\tmetadata_5\\tmetadata_6\\tmetadata_7\\tmetadata_8\\nsample1\\t1.1.1\\t1\\t1\\t1\\tsample1\\t\\t\\t\\t\\t\\t\\t\\t\\nsample2\\t1.1.2\\t1\\t1\\t2\\tsample2\\t\\t\\t\\t\\t\\t\\t\\t\\nsample3\\t2.2.3\\t2\\t2\\t3\\tsample3\\t\\t\\t\\t\\t\\t\\t\\t\\n")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "ArborView/arborview.clustered_data_arborview.html" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.tree.nwk" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.clusters.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.thresholds.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "locidex/merged/profile_1.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Small-scale test of full pipeline hamming distances and single-linkage") {
        tag "pipeline_hamming_single_linkage"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "2,1,0"
                gm_method = "single"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree_hamming_single_linkage.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming_single_linkage.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Make sure single-linkage parameter was used
            assert "single" == path("$launchDir/results/clusters/gas.mcluster.run.json").json.parameters.method
        }
    }

    test("Small-scale test of full pipeline hamming distances and complete-linkage") {
        tag "pipeline_hamming_complete_linkage"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_thresholds = "2,1,0"
                gm_method = "complete"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hamming.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hamming.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree_hamming_complete_linkage.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hamming_complete_linkage.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Make sure complete-linkage parameter was used
            assert "complete" == path("$launchDir/results/clusters/gas.mcluster.run.json").json.parameters.method
        }
    }

    test("Ensure failure because of metadata tabs") {
        tag "pipeline_failure_metadata"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-tabs.csv"
                outdir = "results"
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("ERROR ~ ERROR: Validation of 'input' file failed!")
        }
    }

    test("Test succeed pipeline if valid delimiter set") {
        tag "pipeline_success_valid_delimiter"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_delimiter = '-'
            }
        }

        then {
            assert workflow.success
        }
    }

    test("Test fail pipeline if invalid delimiter set") {
        tag "pipeline_failure_invalid_delimiter"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hamming.csv"
                outdir = "results"

                gm_delimiter = ';'
            }
        }

        then {
            assert workflow.failed
            assert workflow.stderr.contains('* --gm_delimiter: string [;] does not match pattern ^[A-Fa-f0-9\\._-]+$ (;)')
        }
    }

    test("Full pipeline with no metadata") {
        tag "pipeline_no_metadata"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-no-metadata.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile1.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            assert actual_tree.exists()
            assert actual_clusters.exists()
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            assert actual_metadata.exists()
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata_no_metadata.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/arborview.clustered_data_arborview.html")
            assert actual_arborview.exists()
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tsample\\tmetadata_1\\tmetadata_2\\tmetadata_3\\tmetadata_4\\tmetadata_5\\tmetadata_6\\tmetadata_7\\tmetadata_8\\nsample1\\t1.1.1\\t1\\t1\\t1\\tsample1\\t\\t\\t\\t\\t\\t\\t\\t\\nsample2\\t1.1.1\\t1\\t1\\t1\\tsample2\\t\\t\\t\\t\\t\\t\\t\\t\\nsample3\\t1.2.2\\t1\\t2\\t2\\tsample3\\t\\t\\t\\t\\t\\t\\t\\t\\n")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "ArborView/arborview.clustered_data_arborview.html" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.tree.nwk" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.clusters.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.thresholds.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "locidex/merged/profile_1.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Full pipeline with little metadata") {
        tag "pipeline_little_metadata"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-little-metadata.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile1.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            assert actual_tree.exists()
            assert actual_clusters.exists()
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            assert actual_metadata.exists()
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata_little_metadata.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/arborview.clustered_data_arborview.html")
            assert actual_arborview.exists()
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tsample\\tmetadata_1\\tmetadata_2\\tmetadata_3\\tmetadata_4\\tmetadata_5\\tmetadata_6\\tmetadata_7\\tmetadata_8\\nsample1\\t1.1.1\\t1\\t1\\t1\\tsample1\\t\\t\\t\\t1.4\\t\\t\\t\\t\\nsample2\\t1.1.1\\t1\\t1\\t1\\tsample2\\t\\t\\t\\t\\t\\t\\t\\t\\nsample3\\t1.2.2\\t1\\t2\\t2\\tsample3\\t3.1\\t3.2\\t\\t\\t\\t\\t\\t3.8\\n")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "ArborView/arborview.clustered_data_arborview.html" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.tree.nwk" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.clusters.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.thresholds.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "locidex/merged/profile_1.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Testing mismatched IDs") {
        // IDs in the sample sheet and IDs in the individual MLST JSON files will not match.
        // This tests the pipelines ability to handle and correct for this problem.

        tag "mismatch"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-mismatched-ids.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check ID correction:
            def sample_report = path("$launchDir/results/locidex/concat/MLST_error_report_concat.csv")
            assert sample_report.exists()
            assert sample_report.text.contains("sampleA,[\'sample1\'],sampleA ID and JSON key in sample1.mlst.json DO NOT MATCH. The \'sample1\' key in sample1.mlst.json has been forcefully changed to \'sampleA\': User should manually check input files to ensure correctness.")
            assert sample_report.text.contains("sampleB,[\'sample2\'],sampleB ID and JSON key in sample2.mlst.json DO NOT MATCH. The \'sample2\' key in sample2.mlst.json has been forcefully changed to \'sampleB\': User should manually check input files to ensure correctness.")
            assert sample_report.text.contains("sampleC,[\'sample3\'],sampleC ID and JSON key in sample3.mlst.json DO NOT MATCH. The \'sample3\' key in sample3.mlst.json has been forcefully changed to \'sampleC\': User should manually check input files to ensure correctness.")

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-mismatched-ids.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-mismatched-ids.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            assert actual_tree.exists()
            assert actual_clusters.exists()
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree-mismatched-ids.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_dists-mismatched-ids.tsv")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            assert actual_metadata.exists()
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata-mismatched-ids.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/arborview.clustered_data_arborview.html")
            assert actual_arborview.exists()
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tsample\\tmetadata_1\\tmetadata_2\\tmetadata_3\\tmetadata_4\\tmetadata_5\\tmetadata_6\\tmetadata_7\\tmetadata_8\\nsampleA\\t1.1.1\\t1\\t1\\t1\\tsampleA\\t1.1\\t1.2\\t1.3\\t1.4\\t1.5\\t1.6\\t1.7\\t1.8\\nsampleB\\t1.1.1\\t1\\t1\\t1\\tsampleB\\t2.1\\t2.2\\t2.3\\t2.4\\t2.5\\t2.6\\t2.7\\t2.8\\nsampleC\\t1.2.2\\t1\\t2\\t2\\tsampleC\\t3.1\\t3.2\\t3.3\\t3.4\\t3.5\\t3.6\\t3.7\\t3.8\\n")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "ArborView/arborview.clustered_data_arborview.html" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.tree.nwk" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.clusters.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.thresholds.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "locidex/merged/profile_1.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Testing partially mismatched IDs") {

        tag "partial_mismatch"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-partial-mismatched-ids.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check ID correction:
            def sample_report = path("$launchDir/results/locidex/concat/MLST_error_report_concat.csv")
            assert sample_report.exists()
            assert sample_report.text.contains("sampleA,[\'sample1\'],sampleA ID and JSON key in sample1.mlst.json DO NOT MATCH. The \'sample1\' key in sample1.mlst.json has been forcefully changed to \'sampleA\': User should manually check input files to ensure correctness.")
            assert sample_report.text.contains("sampleB,[\'sample2\'],sampleB ID and JSON key in sample2.mlst.json DO NOT MATCH. The \'sample2\' key in sample2.mlst.json has been forcefully changed to \'sampleB\': User should manually check input files to ensure correctness.")
            assert !sample_report.text.contains("sampleC,[\'sample3\'],sampleC ID and JSON key in sample3.mlst.json DO NOT MATCH. The \'sample3\' key in sample3.mlst.json has been forcefully changed to \'sampleC\': User should manually check input files to ensure correctness.")


            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-partial-mismatched-ids.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            assert actual_distances.exists()
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-partial-mismatched-ids.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            assert actual_tree.exists()
            assert actual_clusters.exists()
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree-partial-mismatched-ids.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_dists-partial-mismatched-ids.tsv")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            assert actual_metadata.exists()
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata-partial-mismatched-ids.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/arborview.clustered_data_arborview.html")
            assert actual_arborview.exists()
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tsample\\tmetadata_1\\tmetadata_2\\tmetadata_3\\tmetadata_4\\tmetadata_5\\tmetadata_6\\tmetadata_7\\tmetadata_8\\nsampleA\\t1.1.1\\t1\\t1\\t1\\tsampleA\\t1.1\\t1.2\\t1.3\\t1.4\\t1.5\\t1.6\\t1.7\\t1.8\\nsampleB\\t1.1.1\\t1\\t1\\t1\\tsampleB\\t2.1\\t2.2\\t2.3\\t2.4\\t2.5\\t2.6\\t2.7\\t2.8\\nsample3\\t1.2.2\\t1\\t2\\t2\\tsample3\\t3.1\\t3.2\\t3.3\\t3.4\\t3.5\\t3.6\\t3.7\\t3.8\\n")

            // compare IRIDA Next JSON output
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "ArborView/arborview.clustered_data_arborview.html" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.tree.nwk" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.clusters.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.thresholds.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "locidex/merged/profile_1.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }

    test("Testing sample_name column in samplesheet") {
        tag "add_sample_name"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-addsamplename.csv"
                outdir = "results"

                pd_distm = "scaled"
                gm_thresholds = "50,20,0"

                metadata_1_header = "metadata_1"
                metadata_2_header = "metadata_2"
                metadata_3_header = "metadata_3"
                metadata_4_header = "metadata_4"
                metadata_5_header = "metadata_5"
                metadata_6_header = "metadata_6"
                metadata_7_header = "metadata_7"
                metadata_8_header = "metadata_8"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check ID correction:
            def sample_report = path("$launchDir/results/locidex/concat/MLST_error_report_concat.csv")
            assert sample_report.exists()

            // Check appended metadata is correct:
            def actual_metadata = path("$launchDir/results/append/clusters_and_metadata.tsv")
            assert actual_metadata.exists()
            def expected_metadata = path("$baseDir/tests/data/append/expected_clusters_and_metadata_addsamplename.tsv")
            assert actual_metadata.text == expected_metadata.text

            // Check that the ArborView output is created
            def actual_arborview = path("$launchDir/results/ArborView/arborview.clustered_data_arborview.html")
            assert actual_arborview.exists()
            assert actual_arborview.text.contains("id\\taddress\\tlevel_1\\tlevel_2\\tlevel_3\\tsample\\tmetadata_1\\tmetadata_2\\tmetadata_3\\tmetadata_4\\tmetadata_5\\tmetadata_6\\tmetadata_7\\tmetadata_8\\nS_1\\t1.1.1\\t1\\t1\\t1\\tsample1\\t1.1\\t1.2\\t1.3\\t1.4\\t1.5\\t1.6\\t1.7\\t1.8\\nS2_\\t1.1.1\\t1\\t1\\t1\\tsample2\\t2.1\\t2.2\\t2.3\\t2.4\\t2.5\\t2.6\\t2.7\\t2.8\\nS2__sample3\\t1.2.2\\t1\\t2\\t2\\tsample3\\t3.1\\t3.2\\t3.3\\t3.4\\t3.5\\t3.6\\t3.7\\t3.8\\n")
            // compare IRIDA Next JSON output (should not be changed by adding sample_name column)
            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.findAll { it.path == "ArborView/arborview.clustered_data_arborview.html" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.tree.nwk" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.clusters.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "clusters/gas.mcluster.thresholds.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.run.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.results.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.ref_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.query_profile.tsv" }.size() == 1
            assert iridanext_global.findAll { it.path == "distances/profile_dists.allele_map.json" }.size() == 1
            assert iridanext_global.findAll { it.path == "locidex/merged/profile_1.tsv" }.size() == 1

            assert iridanext_samples.isEmpty()
            assert iridanext_metadata.isEmpty()
        }
    }
}
