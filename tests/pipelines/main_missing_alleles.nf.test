nextflow_pipeline {

    name "Integration Tests for parameters dealing with missing or removed alleles"
    script "main.nf"

    test("Full pipeline hashes and missing data") {
        tag "pipeline_hashes_missing"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-missing.csv"
                outdir = "results"

                gm_thresholds = "1"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hash-missing.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hash-missing.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree_hash_missing.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hash_missing.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text
        }
    }

    test("Full pipeline hashes and missing data count missing as differences") {
        tag "pipeline_hashes_missing_count_missing"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-missing.csv"
                outdir = "results"

                gm_thresholds = "1"
                pd_count_missing = true
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hash-missing.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hash-missing-count-missing.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_tree = path("$launchDir/results/clusters/gas.mcluster.tree.nwk")
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_tree = path("$baseDir/tests/data/clusters/expected_tree_hash_missing_count_missing.nwk")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hash_missing_count_missing.txt")
            assert actual_tree.text == expected_tree.text
            assert actual_clusters.text ==  expected_clusters.text
        }
    }

    test("Full pipeline remove loci with missing data") {
        tag "pipeline_hashes_remove_missing_loci"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-missing.csv"
                outdir = "results"

                gm_thresholds = "1"
                pd_count_missing = true
                pd_missing_threshold = 0.5
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hash-missing.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hash-remove-missing-loci.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hash_remove_missing_loci.txt")
            assert actual_clusters.text ==  expected_clusters.text
        }
    }

    test("Full pipeline additional missing alleles") {
        tag "pipeline_more_missing"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-more-missing.csv"
                outdir = "results"

                gm_thresholds = "1"
                pd_count_missing = true
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hash-more-missing.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hash-more-missing.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hash_more_missing.txt")
            assert actual_clusters.text ==  expected_clusters.text
        }
    }

    test("Full pipeline missing alleles remove sample") {
        tag "pipeline_more_missing_remove_sample"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-more-missing.csv"
                outdir = "results"

                gm_thresholds = "1"
                pd_count_missing = true
                pd_sample_quality_threshold = 0.5
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hash-more-missing.tsv")
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hash-more-missing-remove-sample.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hash_more_missing_remove_sample.txt")
            assert actual_clusters.text ==  expected_clusters.text
        }
    }

    test("Test fail pipeline if non-existent columns file is passed") {
        tag "pipeline_failure_columns_no_exist"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-missing.csv"
                outdir = "results"

                pd_columns = "./no-exist"
            }
        }

        then {
            assert workflow.failed
            assert workflow.stderr.contains("* --pd_columns: the file or directory './no-exist' does not exist.")
        }
    }

    test("Full pipeline keep two loci in passed columns file") {
        tag "pipeline_keep_two_loci_columns_file"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-missing.csv"
                outdir = "results"

                gm_thresholds = "0"
                pd_columns = "$baseDir/tests/data/columns/keep-two-loci-single-column.txt"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hash-missing.tsv")
            // profiles should be same as other tests since loci to keep applies only
            // when computing distances in profile_dists
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // ref and query profile from profile_dists should only have the two kept loci
            assert path("$launchDir/results/distances/profile_dists.ref_profile.tsv")
                        .readLines()[0] == "sample_id\tl2\tl3"
            assert path("$launchDir/results/distances/profile_dists.query_profile.tsv")
                        .readLines()[0] == "sample_id\tl2\tl3"

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hash-keep-two-loci.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hash_keep_two_loci.txt")
            assert actual_clusters.text ==  expected_clusters.text
        }
    }

    test("Full pipeline keep one loci in passed columns file") {
        tag "pipeline_keep_one_loci_columns_file"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-missing.csv"
                outdir = "results"

                gm_thresholds = "0"
                pd_columns = "$baseDir/tests/data/columns/keep-one-loci-single-column.txt"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check MLST files
            def actual_profile_tsv = path("$launchDir/results/locidex/merged/profile_1.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile-hash-missing.tsv")
            // profiles should be same as other tests since loci to keep applies only
            // when computing distances in profile_dists
            assert actual_profile_tsv.text == expected_profile_tsv.text

            // ref and query profile from profile_dists should only have the two kept loci
            assert path("$launchDir/results/distances/profile_dists.ref_profile.tsv")
                        .readLines()[0] == "sample_id\tl2"
            assert path("$launchDir/results/distances/profile_dists.query_profile.tsv")
                        .readLines()[0] == "sample_id\tl2"

            // Check computed distance matrix is correct and that the file exists
            def actual_distances = path("$launchDir/results/distances/profile_dists.results.tsv")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists-hash-keep-one-loci.tsv")
            assert actual_distances.text == expected_distances.text

            // Check computed clusters are correct and exist
            def actual_clusters = path("$launchDir/results/clusters/gas.mcluster.clusters.tsv")
            def expected_clusters = path("$baseDir/tests/data/clusters/expected_clusters_hash_keep_one_loci.txt")
            assert actual_clusters.text ==  expected_clusters.text
        }
    }

    test("Test failure of pipeline when keeping no loci") {
        tag "pipeline_keep_zero_loci"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash-missing.csv"
                outdir = "results"

                gm_thresholds = "0"
                pd_columns = "$baseDir/tests/data/columns/keep-zero-loci-empty-file.txt"
            }
        }

        then {
            assert workflow.failed
        }
    }
}
